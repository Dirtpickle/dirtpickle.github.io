const fs = require('fs');
const path = require('path');

// Simple configuration - all supported file types
const SUPPORTED_EXTENSIONS = [
    '.jpg', '.jpeg', '.png', '.gif', '.webp', '.svg',
    '.JPG', '.JPEG', '.PNG', '.GIF', '.WEBP', '.SVG',
    '.mp4', '.mov', '.avi', '.webm', '.MP4', '.MOV', '.AVI', '.WEBM',
    '.mp3', '.wav', '.ogg', '.m4a', '.MP3', '.WAV', '.OGG', '.M4A'
];

// Clean up titles
function formatTitle(filename) {
    return filename
        .replace(/\.[^/.]+$/, '') // Remove extension
        .replace(/[-_]+/g, ' ')   // Replace dashes/underscores with spaces
        .replace(/\b\w/g, c => c.toUpperCase()); // Capitalize
}

// Get media type from file extension
function getMediaType(filename) {
    const ext = path.extname(filename).toLowerCase();
    if (['.jpg', '.jpeg', '.png', '.gif', '.webp', '.svg'].includes(ext)) return 'image';
    if (['.mp4', '.mov', '.avi', '.webm'].includes(ext)) return 'video';
    if (['.mp3', '.wav', '.ogg', '.m4a'].includes(ext)) return 'audio';
    return 'unknown';
}

// Universal directory scanner - works for ANY directory
function scanDirectory(dir) {
    if (!fs.existsSync(dir)) return [];
    
    try {
        const items = [];
        const files = fs.readdirSync(dir);
        
        for (const file of files) {
            const filePath = path.join(dir, file);
            const stat = fs.statSync(filePath);
            
            if (stat.isDirectory()) {
                // Recursively scan subdirectories
                const subdirItems = scanDirectory(filePath);
                items.push(...subdirItems);
            } else {
                // Check if it's a supported file
                const ext = path.extname(file);
                if (SUPPORTED_EXTENSIONS.includes(ext)) {
                    const mediaType = getMediaType(file);
                    const relativePath = path.relative('.', filePath).replace(/\\/g, '/');
                    
                    items.push({
                        title: formatTitle(file),
                        filename: file,
                        path: relativePath,
                        type: mediaType,
                        category: path.basename(path.dirname(relativePath))
                    });
                }
            }
        }
        
        return items.sort((a, b) => a.title.localeCompare(b.title));
    } catch (error) {
        console.error(`Error scanning ${dir}:`, error.message);
        return [];
    }
}

// Universal page updater - works for ANY page
function updatePageData(htmlFile, dataArrayName, items) {
    if (!fs.existsSync(htmlFile)) {
        console.log(`⚠ ${htmlFile} doesn't exist, skipping...`);
        return;
    }
    
    try {
        let content = fs.readFileSync(htmlFile, 'utf8');
        
        // Find and replace the data array
        const arrayPattern = new RegExp(`const ${dataArrayName}\\s*=\\s*\\[[\\s\\S]*?\\];`);
        const newArrayString = `const ${dataArrayName} = ${JSON.stringify(items, null, 4)};`;
        
        if (arrayPattern.test(content)) {
            content = content.replace(arrayPattern, newArrayString);
            fs.writeFileSync(htmlFile, content);
            console.log(`✅ Updated ${htmlFile} with ${items.length} items`);
        } else {
            console.log(`⚠ Could not find ${dataArrayName} array in ${htmlFile}`);
        }
    } catch (error) {
        console.error(`❌ Error updating ${htmlFile}:`, error.message);
    }
}

// Main execution - simple and universal
function generateAll() {
    console.log('🚀 Universal Gallery Generator - Scanning all media...\n');
    
    // Define all the pages and what they should contain
    const pages = [
        { file: 'index.html', dataName: 'featuredData', filter: item => item.filename.includes('-f') },
        { file: 'character-design.html', dataName: 'galleryData', filter: item => item.category === 'character-design' },
        { file: 'game-art.html', dataName: 'galleryData', filter: item => item.category === 'game-art' || item.category === 'props' || item.category === 'ui' },
        { file: 'illustration.html', dataName: 'galleryData', filter: item => item.category === 'illustration' },
        { file: 'tattoo.html', dataName: 'galleryData', filter: item => item.category === 'tattoo' },
        { file: '3d.html', dataName: 'galleryData', filter: item => item.category === '3d' },
        { file: 'video.html', dataName: 'galleryData', filter: item => item.type === 'video' },
        { file: 'music.html', dataName: 'musicData', filter: item => item.type === 'audio' }
    ];
    
    // Scan all directories once
    const allItems = [
        ...scanDirectory('./images'),
        ...scanDirectory('./video'),
        ...scanDirectory('./music'),
        ...scanDirectory('./3d')
    ];
    
    console.log(`📁 Found ${allItems.length} total media items\n`);
    
    // Update each page with its filtered content
    pages.forEach(page => {
        const items = allItems.filter(page.filter);
        updatePageData(page.file, page.dataName, items);
    });
    
    console.log('\n✅ All pages updated successfully!');
    console.log('\n📋 Summary:');
    console.log('• Just add any media file to any folder');
    console.log('• Run "node generate.js"');
    console.log('• That\'s it - everything updates automatically!');
}

// Export for testing
module.exports = { generateAll, scanDirectory };

// Run if called directly
if (require.main === module) {
    generateAll();
}

// Utility functions
function formatTitle(filename) {
    return filename
        .replace(/\.[^/.]+$/, '') // Remove extension
        .replace(/-f$/i, '')      // Remove -f suffix (for featured images)
        .replace(/[-_]+/g, ' ')   // Replace dashes/underscores with spaces
        .replace(/\s+F$/i, '')    // Remove " F" suffix (space + F)
        .replace(/\b\w/g, c => c.toUpperCase()); // Capitalize words
}

// Find custom thumbnail for a media file
function findCustomThumbnail(mediaPath, category, subcategory = null) {
    const baseName = path.basename(mediaPath, path.extname(mediaPath));
    
    // Build thumbnail directory path
    let thumbnailDir = `./thumbnails/${category}`;
    if (subcategory) {
        thumbnailDir += `/${subcategory}`;
    }
    
    // Check for thumbnail with various extensions
    const thumbnailExtensions = ['.jpg', '.jpeg', '.png', '.webp'];
    
    for (const ext of thumbnailExtensions) {
        const thumbnailPath = `${thumbnailDir}/${baseName}${ext}`;
        if (fs.existsSync(thumbnailPath)) {
            return thumbnailPath.replace('./', '');
        }
    }
    
    return null; // No custom thumbnail found
}

// Simple, robust file scanning function
function scanDirectory(dir, validExtensions) {
    if (!fs.existsSync(dir)) {
        console.log(`Directory ${dir} doesn't exist, skipping...`);
        return [];
    }
    
    try {
        const files = fs.readdirSync(dir)
            .filter(file => {
                // Skip system files
                if (file.startsWith('.')) return false;
                
                // Check extension (case insensitive)
                const ext = path.extname(file).toLowerCase();
                const upperExt = path.extname(file).toUpperCase();
                return validExtensions.includes(ext) || validExtensions.includes(upperExt);
            })
            .sort();
            
        console.log(`  Found ${files.length} valid files in ${dir}:`, files);
        
        return files.map(file => ({
            title: formatTitle(file),
            filename: file,
            path: `${dir.replace('./', '')}/${file}`
        }));
    } catch (error) {
        console.error(`Error reading directory ${dir}:`, error);
        return [];
    }
}

// Generate data for images from category folders
function generateImageData() {
    const categories = ['character-design', 'game-art', 'digital-art', 'tattoo', 'illustration', '3d'];
    const allImages = [];
    
    categories.forEach(category => {
        const categoryDir = `./images/${category}`;
        if (fs.existsSync(categoryDir)) {
            // For game-art, scan subfolders too
            if (category === 'game-art') {
                const subfolders = ['props', 'ui'];
                subfolders.forEach(subfolder => {
                    const subfolderDir = `${categoryDir}/${subfolder}`;
                    if (fs.existsSync(subfolderDir)) {
                        const images = scanDirectory(subfolderDir, config.imageExtensions);
                        images.forEach(img => {
                            allImages.push({
                                title: img.title,
                                image: img.path,
                                description: `${img.title} - ${subfolder} artwork`,
                                category: category,
                                subcategory: subfolder
                            });
                        });
                    }
                });
            } else {
                const images = scanDirectory(categoryDir, config.imageExtensions);
                images.forEach(img => {
                    allImages.push({
                        title: img.title,
                        image: img.path,
                        description: `${img.title} - ${category.replace('-', ' ')} artwork`,
                        category: category
                    });
                });
            }
        }
    });
    
    return allImages;
}

// Generate category-specific data with mixed media support
function generateCategoryData(category) {
    let allMedia = [];
    
    // Check both the category root folder (e.g., ./3d/) and images subfolder (e.g., ./images/3d/)
    const rootCategoryDir = `./${category}`;
    const imagesCategoryDir = `./images/${category}`;
    
    // Scan root category folder for both videos and images
    if (fs.existsSync(rootCategoryDir)) {
        console.log(`Scanning root folder: ${rootCategoryDir}`);
        
        // Get videos from root folder
        const videos = scanDirectory(rootCategoryDir, config.videoExtensions);
        videos.forEach(video => {
            const customThumbnail = findCustomThumbnail(video.path, category);
            const mediaItem = {
                title: video.title,
                video: video.path,
                description: `${video.title} video`,
                category: category,
                type: 'video'
            };
            
            if (customThumbnail) {
                mediaItem.thumbnail = customThumbnail;
            }
            
            allMedia.push(mediaItem);
        });
        
        // Get images from root folder
        const images = scanDirectory(rootCategoryDir, config.imageExtensions);
        images.forEach(img => {
            allMedia.push({
                title: img.title,
                image: img.path,
                description: `${img.title} artwork`,
                category: category,
                type: 'image'
            });
        });
    }
    
    // Scan images subfolder for additional images
    if (fs.existsSync(imagesCategoryDir)) {
        console.log(`Scanning images folder: ${imagesCategoryDir}`);
        
        // For game-art, scan subfolders too
        if (category === 'game-art') {
            const subfolders = ['props', 'ui'];
            subfolders.forEach(subfolder => {
                const subfolderDir = `${imagesCategoryDir}/${subfolder}`;
                if (fs.existsSync(subfolderDir)) {
                    const images = scanDirectory(subfolderDir, config.imageExtensions);
                    images.forEach(img => {
                        allMedia.push({
                            title: img.title,
                            image: img.path,
                            description: `${img.title} - ${subfolder} artwork`,
                            category: category,
                            subcategory: subfolder,
                            type: 'image'
                        });
                    });
                    
                    const videos = scanDirectory(subfolderDir, config.videoExtensions);
                    videos.forEach(video => {
                        const customThumbnail = findCustomThumbnail(video.path, category, subfolder);
                        const mediaItem = {
                            title: video.title,
                            video: video.path,
                            description: `${video.title} - ${subfolder} video`,
                            category: category,
                            subcategory: subfolder,
                            type: 'video'
                        };
                        
                        if (customThumbnail) {
                            mediaItem.thumbnail = customThumbnail;
                        }
                        
                        allMedia.push(mediaItem);
                    });
                }
            });
        } else {
            const images = scanDirectory(imagesCategoryDir, config.imageExtensions);
            images.forEach(img => {
                allMedia.push({
                    title: img.title,
                    image: img.path,
                    description: `${img.title} artwork`,
                    category: category,
                    type: 'image'
                });
            });
            
            const videos = scanDirectory(imagesCategoryDir, config.videoExtensions);
            videos.forEach(video => {
                const customThumbnail = findCustomThumbnail(video.path, category);
                const mediaItem = {
                    title: video.title,
                    video: video.path,
                    description: `${video.title} video`,
                    category: category,
                    type: 'video'
                };
                
                if (customThumbnail) {
                    mediaItem.thumbnail = customThumbnail;
                }
                
                allMedia.push(mediaItem);
            });
        }
    }
    
    console.log(`Found ${allMedia.length} media items for ${category} (${allMedia.filter(m => m.type === 'image').length} images, ${allMedia.filter(m => m.type === 'video').length} videos)`);
    return allMedia;
}

// Generate data for videos from root video folder
function generateVideoData() {
    const videoDir = config.directories.video;
    if (!fs.existsSync(videoDir)) {
        console.log('⚠ Video directory not found:', videoDir);
        return [];
    }
    
    const videos = scanDirectory(videoDir, config.videoExtensions);
    console.log(`Found ${videos.length} videos`);
    
    return videos.map(video => ({
        title: video.title,
        src: `video/${video.filename}`,
        description: `${video.title} video`,
        category: 'video'
    }));
}

// Generate data for music
function generateMusicData() {
    const music = scanDirectory(config.directories.music, config.audioExtensions);
    return music.map(track => ({
        title: track.title,
        src: track.path
    }));
}

// Update HTML files with new data
function updateHTMLFile(filePath, dataArrayName, newData) {
    if (!fs.existsSync(filePath)) {
        console.log(`File ${filePath} doesn't exist, skipping...`);
        return;
    }
    
    let content = fs.readFileSync(filePath, 'utf8');
    
    // Find and replace the data array (multi-line safe)
    const arrayPattern = new RegExp(`const ${dataArrayName}\\s*=\\s*\\[[\\s\\S]*?];`);
    const newArrayString = `const ${dataArrayName} = ${JSON.stringify(newData, null, 12)};`;
    if (arrayPattern.test(content)) {
        content = content.replace(arrayPattern, newArrayString);
        fs.writeFileSync(filePath, content);
        console.log(`✓ Updated ${filePath} with ${newData.length} ${dataArrayName} items`);
    } else {
        console.log(`⚠ Could not find ${dataArrayName} array in ${filePath}`);
    }
}

// Special function to update the consolidated art.html page with multiple data arrays
function updateArtPageArrays(filePath, dataArrays) {
    if (!fs.existsSync(filePath)) {
        console.log(`⚠ File ${filePath} doesn't exist, skipping...`);
        return;
    }
    
    let content = fs.readFileSync(filePath, 'utf8');
    
    // Update each data array
    Object.entries(dataArrays).forEach(([arrayName, data]) => {
        const arrayPattern = new RegExp(`const ${arrayName}\\s*=\\s*\\[[^\\]]*\\];`, 's');
        const newArrayString = `const ${arrayName} = ${JSON.stringify(data, null, 4)};`;
        
        if (arrayPattern.test(content)) {
            content = content.replace(arrayPattern, newArrayString);
            console.log(`✓ Updated ${arrayName} with ${data.length} items`);
        } else {
            console.log(`⚠ Could not find ${arrayName} array in ${filePath}`);
        }
    });
    
    fs.writeFileSync(filePath, content);
    console.log(`✓ Updated consolidated ${filePath}`);
}

// Main execution
function generateAll() {
    console.log('🔄 Scanning directories and updating website...\n');
    
    // Generate all image data
    const allImageData = generateImageData();
    console.log(`Found ${allImageData.length} total images across all categories`);
    
    // Generate category-specific data
    const categories = ['character-design', 'game-art', 'digital-art', 'tattoo', 'illustration'];
    categories.forEach(category => {
        const categoryData = generateCategoryData(category);
        console.log(`Found ${categoryData.length} images in ${category}`);
        
        // Update individual category pages (if they exist)
        if (fs.existsSync(`${category}.html`)) {
            updateHTMLFile(`${category}.html`, 'galleryData', categoryData);
        }
    });

    // Handle videos separately
    const videoData = generateVideoData();
    if (fs.existsSync('video.html')) {
        updateHTMLFile('video.html', 'galleryData', videoData);
    }

    // Update consolidated art.html page with separate data arrays
    if (fs.existsSync('art.html')) {
        console.log('✓ Updating consolidated art.html page...');
        
        // Generate data for each art section
        const characterData = generateCategoryData('character-design');
        const gameArtData = generateCategoryData('game-art');
        const illustrationData = generateCategoryData('illustration');
        const tattooData = generateCategoryData('tattoo');
        
        updateArtPageArrays('art.html', {
            characterData,
            gameArtData, 
            illustrationData,
            tattooData
        });
    }
    
    // Update 3D page with its own data
    if (fs.existsSync('3d.html')) {
        console.log('✓ Updating 3d.html page...');
        const threeDData = generateCategoryData('3d');
        updateHTMLFile('3d.html', 'threeDData', threeDData);
    }
    
    // Generate music data  
    const musicData = generateMusicData();
    console.log(`Found ${musicData.length} music files\n`);
    
    // Update music page
    updateHTMLFile('music.html', 'musicData', musicData);
    
    // Update featured section on homepage with images marked -f
    const featuredData = allImageData
        .filter(img => /-f\.[a-zA-Z0-9]+$/.test(img.image))
        .map(img => {
            // Remove -f from the title and filename for display
            const base = path.basename(img.image);
            const title = base
                .replace(/-f(?=\.[^/.]+$)/, '') // Remove -f before extension
                .replace(/\.[^/.]+$/, '') // Remove extension
                .replace(/[-_]+/g, ' ')
                .replace(/\b\w/g, c => c.toUpperCase());
            return {
                title,
                image: img.image,
                category: img.category
            };
        });
    updateHTMLFile('index.html', 'featuredData', featuredData);
    
    console.log('\n✅ Website updated successfully!');
    console.log('\nNext steps:');
    console.log('1. Add your images to the appropriate category folders in images/');
    console.log('2. Add your music files to the music/ folder');
    console.log('3. Run "node generate.js" again to update the website');
    console.log('4. Open index.html in your browser to preview');
}

// Run if called directly
if (require.main === module) {
    generateAll();
}

module.exports = { generateAll, generateImageData, generateMusicData };